export PATH="/home/tdurieux/defects4j/framework/bin:$PATH";cp -r /home/tdurieux/projects/math/math_102 /tmp/math_102_Ranking;cd /tmp/math_102_Ranking;defects4j compile;mkdir lib/;cp -r /home/tdurieux/defects4j/framework/projects/lib/* lib/;cp -r /home/tdurieux/defects4j/framework/projects/Math/lib/* lib/;find . -type f -name "package-info.java" -delete;
cd /tmp/math_102_Ranking;cp -r /home/tdurieux/nopol/z3-x64-debian-7.7/bin/ lib/z3;time java -cp /home/tdurieux/nopol/nopol-0.0.3-SNAPSHOT-jar-with-dependencies.jar fr.inria.lille.repair.Main --mode ranking --type condition --oracle angelic --synthesis smt --solver z3 --solver-path lib/z3/z3 --complianceLevel 3 --source src/java/ --classpath target/classes/:target/test-classes/:lib/commons-discovery-0.5.jar:/home/tdurieux/nopol/nopol-0.0.3-SNAPSHOT-jar-with-dependencies.jar;rm -rf /tmp/math_102_Ranking;

/************************/
Executed tests:   1146
Successful tests: 1111
Failed tests:     35

org.apache.commons.math.fraction.FractionTest#testFloatValue
java.lang.ClassFormatError: StackMapTable format error: bad offset for Uninitialized in method org.apache.commons.math.fraction.Fraction.addSub(Lorg/apache/commons/math/fraction/Fraction;Z)Lorg/apache/commons/math/fraction/Fraction;
	at org.apache.commons.math.fraction.FractionTest.testFloatValue(FractionTest.java:87)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at junit.framework.TestCase.runTest(TestCase.java:176)
	at junit.framework.TestCase.runBare(TestCase.java:141)
	at junit.framework.TestResult$1.protect(TestResult.java:122)
	at junit.framework.TestResult.runProtected(TestResult.java:142)
	at junit.framework.TestResult.run(TestResult.java:125)
	at junit.framework.TestCase.run(TestCase.java:129)
	at junit.framework.TestSuite.runTest(TestSuite.java:255)
	at junit.framework.TestSuite.run(TestSuite.java:250)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:84)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:138)
	at com.gzoltar.core.instr.testing.junit.JUnitRunner.run(JUnitRunner.java:47)
	at com.gzoltar.core.instr.Runner.main(Runner.java:46)

org.apache.commons.math.fraction.FractionTest#testAbs
java.lang.ClassFormatError: StackMapTable format error: bad offset for Uninitialized in method org.apache.commons.math.fraction.Fraction.addSub(Lorg/apache/commons/math/fraction/Fraction;Z)Lorg/apache/commons/math/fraction/Fraction;
	at org.apache.commons.math.fraction.FractionTest.testAbs(FractionTest.java:126)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at junit.framework.TestCase.runTest(TestCase.java:176)
	at junit.framework.TestCase.runBare(TestCase.java:141)
	at junit.framework.TestResult$1.protect(TestResult.java:122)
	at junit.framework.TestResult.runProtected(TestResult.java:142)
	at junit.framework.TestResult.run(TestResult.java:125)
	at junit.framework.TestCase.run(TestCase.java:129)
	at junit.framework.TestSuite.runTest(TestSuite.java:255)
	at junit.framework.TestSuite.run(TestSuite.java:250)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:84)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:138)
	at com.gzoltar.core.instr.testing.junit.JUnitRunner.run(JUnitRunner.java:47)
	at com.gzoltar.core.instr.Runner.main(Runner.java:46)

org.apache.commons.math.fraction.FractionTest#testAdd
java.lang.ClassFormatError: StackMapTable format error: bad offset for Uninitialized in method org.apache.commons.math.fraction.Fraction.addSub(Lorg/apache/commons/math/fraction/Fraction;Z)Lorg/apache/commons/math/fraction/Fraction;
	at org.apache.commons.math.fraction.FractionTest.testAdd(FractionTest.java:193)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at junit.framework.TestCase.runTest(TestCase.java:176)
	at junit.framework.TestCase.runBare(TestCase.java:141)
	at junit.framework.TestResult$1.protect(TestResult.java:122)
	at junit.framework.TestResult.runProtected(TestResult.java:142)
	at junit.framework.TestResult.run(TestResult.java:125)
	at junit.framework.TestCase.run(TestCase.java:129)
	at junit.framework.TestSuite.runTest(TestSuite.java:255)
	at junit.framework.TestSuite.run(TestSuite.java:250)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:84)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:138)
	at com.gzoltar.core.instr.testing.junit.JUnitRunner.run(JUnitRunner.java:47)
	at com.gzoltar.core.instr.Runner.main(Runner.java:46)

org.apache.commons.math.fraction.FractionTest#testSubtract
java.lang.ClassFormatError: StackMapTable format error: bad offset for Uninitialized in method org.apache.commons.math.fraction.Fraction.addSub(Lorg/apache/commons/math/fraction/Fraction;Z)Lorg/apache/commons/math/fraction/Fraction;
	at org.apache.commons.math.fraction.FractionTest.testSubtract(FractionTest.java:348)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at junit.framework.TestCase.runTest(TestCase.java:176)
	at junit.framework.TestCase.runBare(TestCase.java:141)
	at junit.framework.TestResult$1.protect(TestResult.java:122)
	at junit.framework.TestResult.runProtected(TestResult.java:142)
	at junit.framework.TestResult.run(TestResult.java:125)
	at junit.framework.TestCase.run(TestCase.java:129)
	at junit.framework.TestSuite.runTest(TestSuite.java:255)
	at junit.framework.TestSuite.run(TestSuite.java:250)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:84)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:138)
	at com.gzoltar.core.instr.testing.junit.JUnitRunner.run(JUnitRunner.java:47)
	at com.gzoltar.core.instr.Runner.main(Runner.java:46)

org.apache.commons.math.fraction.FractionTest#testReciprocal
java.lang.ClassFormatError: StackMapTable format error: bad offset for Uninitialized in method org.apache.commons.math.fraction.Fraction.addSub(Lorg/apache/commons/math/fraction/Fraction;Z)Lorg/apache/commons/math/fraction/Fraction;
	at org.apache.commons.math.fraction.FractionTest.testReciprocal(FractionTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at junit.framework.TestCase.runTest(TestCase.java:176)
	at junit.framework.TestCase.runBare(TestCase.java:141)
	at junit.framework.TestResult$1.protect(TestResult.java:122)
	at junit.framework.TestResult.runProtected(TestResult.java:142)
	at junit.framework.TestResult.run(TestResult.java:125)
	at junit.framework.TestCase.run(TestCase.java:129)
	at junit.framework.TestSuite.runTest(TestSuite.java:255)
	at junit.framework.TestSuite.run(TestSuite.java:250)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:84)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:138)
	at com.gzoltar.core.instr.testing.junit.JUnitRunner.run(JUnitRunner.java:47)
	at com.gzoltar.core.instr.Runner.main(Runner.java:46)

org.apache.commons.math.fraction.FractionTest#testGetReducedFraction
java.lang.ClassFormatError: StackMapTable format error: bad offset for Uninitialized in method org.apache.commons.math.fraction.Fraction.addSub(Lorg/apache/commons/math/fraction/Fraction;Z)Lorg/apache/commons/math/fraction/Fraction;
	at org.apache.commons.math.fraction.FractionTest.testGetReducedFraction(FractionTest.java:431)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at junit.framework.TestCase.runTest(TestCase.java:176)
	at junit.framework.TestCase.runBare(TestCase.java:141)
	at junit.framework.TestResult$1.protect(TestResult.java:122)
	at junit.framework.TestResult.runProtected(TestResult.java:142)
	at junit.framework.TestResult.run(TestResult.java:125)
	at junit.framework.TestCase.run(TestCase.java:129)
	at junit.framework.TestSuite.runTest(TestSuite.java:255)
	at junit.framework.TestSuite.run(TestSuite.java:250)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:84)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:138)
	at com.gzoltar.core.instr.testing.junit.JUnitRunner.run(JUnitRunner.java:47)
	at com.gzoltar.core.instr.Runner.main(Runner.java:46)

org.apache.commons.math.fraction.FractionTest#testConstructorDouble
java.lang.ClassFormatError: StackMapTable format error: bad offset for Uninitialized in method org.apache.commons.math.fraction.Fraction.addSub(Lorg/apache/commons/math/fraction/Fraction;Z)Lorg/apache/commons/math/fraction/Fraction;
	at org.apache.commons.math.fraction.FractionTest.testConstructorDouble(FractionTest.java:112)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at junit.framework.TestCase.runTest(TestCase.java:176)
	at junit.framework.TestCase.runBare(TestCase.java:141)
	at junit.framework.TestResult$1.protect(TestResult.java:122)
	at junit.framework.TestResult.runProtected(TestResult.java:142)
	at junit.framework.TestResult.run(TestResult.java:125)
	at junit.framework.TestCase.run(TestCase.java:129)
	at junit.framework.TestSuite.runTest(TestSuite.java:255)
	at junit.framework.TestSuite.run(TestSuite.java:250)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:84)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:138)
	at com.gzoltar.core.instr.testing.junit.JUnitRunner.run(JUnitRunner.java:47)
	at com.gzoltar.core.instr.Runner.main(Runner.java:46)

org.apache.commons.math.fraction.FractionTest#testCompareTo
java.lang.ClassFormatError: StackMapTable format error: bad offset for Uninitialized in method org.apache.commons.math.fraction.Fraction.addSub(Lorg/apache/commons/math/fraction/Fraction;Z)Lorg/apache/commons/math/fraction/Fraction;
	at org.apache.commons.math.fraction.FractionTest.testCompareTo(FractionTest.java:68)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at junit.framework.TestCase.runTest(TestCase.java:176)
	at junit.framework.TestCase.runBare(TestCase.java:141)
	at junit.framework.TestResult$1.protect(TestResult.java:122)
	at junit.framework.TestResult.runProtected(TestResult.java:142)
	at junit.framework.TestResult.run(TestResult.java:125)
	at junit.framework.TestCase.run(TestCase.java:129)
	at junit.framework.TestSuite.runTest(TestSuite.java:255)
	at junit.framework.TestSuite.run(TestSuite.java:250)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:84)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:138)
	at com.gzoltar.core.instr.testing.junit.JUnitRunner.run(JUnitRunner.java:47)
	at com.gzoltar.core.instr.Runner.main(Runner.java:46)

org.apache.commons.math.fraction.FractionTest#testLongValue
java.lang.ClassFormatError: StackMapTable format error: bad offset for Uninitialized in method org.apache.commons.math.fraction.Fraction.addSub(Lorg/apache/commons/math/fraction/Fraction;Z)Lorg/apache/commons/math/fraction/Fraction;
	at org.apache.commons.math.fraction.FractionTest.testLongValue(FractionTest.java:103)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at junit.framework.TestCase.runTest(TestCase.java:176)
	at junit.framework.TestCase.runBare(TestCase.java:141)
	at junit.framework.TestResult$1.protect(TestResult.java:122)
	at junit.framework.TestResult.runProtected(TestResult.java:142)
	at junit.framework.TestResult.run(TestResult.java:125)
	at junit.framework.TestCase.run(TestCase.java:129)
	at junit.framework.TestSuite.runTest(TestSuite.java:255)
	at junit.framework.TestSuite.run(TestSuite.java:250)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:84)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:138)
	at com.gzoltar.core.instr.testing.junit.JUnitRunner.run(JUnitRunner.java:47)
	at com.gzoltar.core.instr.Runner.main(Runner.java:46)

org.apache.commons.math.fraction.FractionTest#testIntValue
java.lang.ClassFormatError: StackMapTable format error: bad offset for Uninitialized in method org.apache.commons.math.fraction.Fraction.addSub(Lorg/apache/commons/math/fraction/Fraction;Z)Lorg/apache/commons/math/fraction/Fraction;
	at org.apache.commons.math.fraction.FractionTest.testIntValue(FractionTest.java:95)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at junit.framework.TestCase.runTest(TestCase.java:176)
	at junit.framework.TestCase.runBare(TestCase.java:141)
	at junit.framework.TestResult$1.protect(TestResult.java:122)
	at junit.framework.TestResult.runProtected(TestResult.java:142)
	at junit.framework.TestResult.run(TestResult.java:125)
	at junit.framework.TestCase.run(TestCase.java:129)
	at junit.framework.TestSuite.runTest(TestSuite.java:255)
	at junit.framework.TestSuite.run(TestSuite.java:250)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:84)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:138)
	at com.gzoltar.core.instr.testing.junit.JUnitRunner.run(JUnitRunner.java:47)
	at com.gzoltar.core.instr.Runner.main(Runner.java:46)

org.apache.commons.math.fraction.FractionTest#testDivide
java.lang.ClassFormatError: StackMapTable format error: bad offset for Uninitialized in method org.apache.commons.math.fraction.Fraction.addSub(Lorg/apache/commons/math/fraction/Fraction;Z)Lorg/apache/commons/math/fraction/Fraction;
	at org.apache.commons.math.fraction.FractionTest.testDivide(FractionTest.java:272)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at junit.framework.TestCase.runTest(TestCase.java:176)
	at junit.framework.TestCase.runBare(TestCase.java:141)
	at junit.framework.TestResult$1.protect(TestResult.java:122)
	at junit.framework.TestResult.runProtected(TestResult.java:142)
	at junit.framework.TestResult.run(TestResult.java:125)
	at junit.framework.TestCase.run(TestCase.java:129)
	at junit.framework.TestSuite.runTest(TestSuite.java:255)
	at junit.framework.TestSuite.run(TestSuite.java:250)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:84)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:138)
	at com.gzoltar.core.instr.testing.junit.JUnitRunner.run(JUnitRunner.java:47)
	at com.gzoltar.core.instr.Runner.main(Runner.java:46)

org.apache.commons.math.fraction.FractionTest#testMultiply
java.lang.ClassFormatError: StackMapTable format error: bad offset for Uninitialized in method org.apache.commons.math.fraction.Fraction.addSub(Lorg/apache/commons/math/fraction/Fraction;Z)Lorg/apache/commons/math/fraction/Fraction;
	at org.apache.commons.math.fraction.FractionTest.testMultiply(FractionTest.java:327)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at junit.framework.TestCase.runTest(TestCase.java:176)
	at junit.framework.TestCase.runBare(TestCase.java:141)
	at junit.framework.TestResult$1.protect(TestResult.java:122)
	at junit.framework.TestResult.runProtected(TestResult.java:142)
	at junit.framework.TestResult.run(TestResult.java:125)
	at junit.framework.TestCase.run(TestCase.java:129)
	at junit.framework.TestSuite.runTest(TestSuite.java:255)
	at junit.framework.TestSuite.run(TestSuite.java:250)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:84)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:138)
	at com.gzoltar.core.instr.testing.junit.JUnitRunner.run(JUnitRunner.java:47)
	at com.gzoltar.core.instr.Runner.main(Runner.java:46)

org.apache.commons.math.fraction.FractionTest#testEqualsAndHashCode
java.lang.ClassFormatError: StackMapTable format error: bad offset for Uninitialized in method org.apache.commons.math.fraction.Fraction.addSub(Lorg/apache/commons/math/fraction/Fraction;Z)Lorg/apache/commons/math/fraction/Fraction;
	at org.apache.commons.math.fraction.FractionTest.testEqualsAndHashCode(FractionTest.java:418)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at junit.framework.TestCase.runTest(TestCase.java:176)
	at junit.framework.TestCase.runBare(TestCase.java:141)
	at junit.framework.TestResult$1.protect(TestResult.java:122)
	at junit.framework.TestResult.runProtected(TestResult.java:142)
	at junit.framework.TestResult.run(TestResult.java:125)
	at junit.framework.TestCase.run(TestCase.java:129)
	at junit.framework.TestSuite.runTest(TestSuite.java:255)
	at junit.framework.TestSuite.run(TestSuite.java:250)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:84)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:138)
	at com.gzoltar.core.instr.testing.junit.JUnitRunner.run(JUnitRunner.java:47)
	at com.gzoltar.core.instr.Runner.main(Runner.java:46)

org.apache.commons.math.fraction.FractionTest#testNegate
java.lang.ClassFormatError: StackMapTable format error: bad offset for Uninitialized in method org.apache.commons.math.fraction.Fraction.addSub(Lorg/apache/commons/math/fraction/Fraction;Z)Lorg/apache/commons/math/fraction/Fraction;
	at org.apache.commons.math.fraction.FractionTest.testNegate(FractionTest.java:169)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at junit.framework.TestCase.runTest(TestCase.java:176)
	at junit.framework.TestCase.runBare(TestCase.java:141)
	at junit.framework.TestResult$1.protect(TestResult.java:122)
	at junit.framework.TestResult.runProtected(TestResult.java:142)
	at junit.framework.TestResult.run(TestResult.java:125)
	at junit.framework.TestCase.run(TestCase.java:129)
	at junit.framework.TestSuite.runTest(TestSuite.java:255)
	at junit.framework.TestSuite.run(TestSuite.java:250)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:84)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:138)
	at com.gzoltar.core.instr.testing.junit.JUnitRunner.run(JUnitRunner.java:47)
	at com.gzoltar.core.instr.Runner.main(Runner.java:46)

org.apache.commons.math.fraction.FractionTest#testDoubleValue
java.lang.ClassFormatError: StackMapTable format error: bad offset for Uninitialized in method org.apache.commons.math.fraction.Fraction.addSub(Lorg/apache/commons/math/fraction/Fraction;Z)Lorg/apache/commons/math/fraction/Fraction;
	at org.apache.commons.math.fraction.FractionTest.testDoubleValue(FractionTest.java:79)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at junit.framework.TestCase.runTest(TestCase.java:176)
	at junit.framework.TestCase.runBare(TestCase.java:141)
	at junit.framework.TestResult$1.protect(TestResult.java:122)
	at junit.framework.TestResult.runProtected(TestResult.java:142)
	at junit.framework.TestResult.run(TestResult.java:125)
	at junit.framework.TestCase.run(TestCase.java:129)
	at junit.framework.TestSuite.runTest(TestSuite.java:255)
	at junit.framework.TestSuite.run(TestSuite.java:250)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:84)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:138)
	at com.gzoltar.core.instr.testing.junit.JUnitRunner.run(JUnitRunner.java:47)
	at com.gzoltar.core.instr.Runner.main(Runner.java:46)

org.apache.commons.math.fraction.FractionTest#testConstructor
java.lang.ClassFormatError: StackMapTable format error: bad offset for Uninitialized in method org.apache.commons.math.fraction.Fraction.addSub(Lorg/apache/commons/math/fraction/Fraction;Z)Lorg/apache/commons/math/fraction/Fraction;
	at org.apache.commons.math.fraction.FractionTest.testConstructor(FractionTest.java:34)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at junit.framework.TestCase.runTest(TestCase.java:176)
	at junit.framework.TestCase.runBare(TestCase.java:141)
	at junit.framework.TestResult$1.protect(TestResult.java:122)
	at junit.framework.TestResult.runProtected(TestResult.java:142)
	at junit.framework.TestResult.run(TestResult.java:125)
	at junit.framework.TestCase.run(TestCase.java:129)
	at junit.framework.TestSuite.runTest(TestSuite.java:255)
	at junit.framework.TestSuite.run(TestSuite.java:250)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:84)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:138)
	at com.gzoltar.core.instr.testing.junit.JUnitRunner.run(JUnitRunner.java:47)
	at com.gzoltar.core.instr.Runner.main(Runner.java:46)

org.apache.commons.math.optimization.MultiDirectionalTest#testCostExceptions
java.lang.VerifyError: StackMapTable error: bad offset
Exception Details:
  Location:
    org/apache/commons/math/optimization/MultiDirectional.iterateSimplex()V @0: getstatic
  Reason:
    Invalid stackmap specification.
  Current Frame:
    bci: @133
    flags: { }
    locals: { 'org/apache/commons/math/optimization/MultiDirectional', '[Lorg/apache/commons/math/optimization/PointCostPair;', double, double_2nd, double, double_2nd }
    stack: { }
  Bytecode:
    0000000: b200 4e03 5c2e 0460 4f2a b400 084c b200
    0000010: 4e04 5c2e 0460 4f2b 0332 b400 0949 b200
    0000020: 4e05 5c2e 0460 4f2a 2b0f b700 0a39 04b2
    0000030: 004e 065c 2e04 604f 1804 2898 9c00 53b2
    0000040: 004e 075c 2e04 604f 2ab4 0008 3a06 b200
    0000050: 4e08 5c2e 0460 4f2a 2b2a b400 04b7 000a
    0000060: 3907 b200 4e10 065c 2e04 604f 1804 1807
    0000070: 989d 0013 b200 4e10 075c 2e04 604f 2a19
    0000080: 06b5 0008 b200 4e10 085c 2e04 604f b1b2
    0000090: 004e 1009 5c2e 0460 4f2a 2b2a b400 07b7
    00000a0: 000a 3906 b200 4e10 0a5c 2e04 604f 1806
    00000b0: 2898 9c00 0eb2 004e 100b 5c2e 0460 4fb1
    00000c0: b200 4e10 0c5c 2e04 604f a7ff 36       
  Stackmap Table:
    same_frame(@0)
    full_frame(@132,{Object[#39],Object[#40],Double,Double,Object[#40],Double},{})
    chop_frame(@133,2)
    chop_frame(@182,3)

	at org.apache.commons.math.optimization.MultiDirectionalTest.testCostExceptions(MultiDirectionalTest.java:50)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at junit.framework.TestCase.runTest(TestCase.java:176)
	at junit.framework.TestCase.runBare(TestCase.java:141)
	at junit.framework.TestResult$1.protect(TestResult.java:122)
	at junit.framework.TestResult.runProtected(TestResult.java:142)
	at junit.framework.TestResult.run(TestResult.java:125)
	at junit.framework.TestCase.run(TestCase.java:129)
	at junit.framework.TestSuite.runTest(TestSuite.java:255)
	at junit.framework.TestSuite.run(TestSuite.java:250)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:84)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:138)
	at com.gzoltar.core.instr.testing.junit.JUnitRunner.run(JUnitRunner.java:47)
	at com.gzoltar.core.instr.Runner.main(Runner.java:46)

org.apache.commons.math.optimization.MultiDirectionalTest#testRosenbrock
java.lang.VerifyError: StackMapTable error: bad offset
Exception Details:
  Location:
    org/apache/commons/math/optimization/MultiDirectional.iterateSimplex()V @0: getstatic
  Reason:
    Invalid stackmap specification.
  Current Frame:
    bci: @133
    flags: { }
    locals: { 'org/apache/commons/math/optimization/MultiDirectional', '[Lorg/apache/commons/math/optimization/PointCostPair;', double, double_2nd, double, double_2nd }
    stack: { }
  Bytecode:
    0000000: b200 4e03 5c2e 0460 4f2a b400 084c b200
    0000010: 4e04 5c2e 0460 4f2b 0332 b400 0949 b200
    0000020: 4e05 5c2e 0460 4f2a 2b0f b700 0a39 04b2
    0000030: 004e 065c 2e04 604f 1804 2898 9c00 53b2
    0000040: 004e 075c 2e04 604f 2ab4 0008 3a06 b200
    0000050: 4e08 5c2e 0460 4f2a 2b2a b400 04b7 000a
    0000060: 3907 b200 4e10 065c 2e04 604f 1804 1807
    0000070: 989d 0013 b200 4e10 075c 2e04 604f 2a19
    0000080: 06b5 0008 b200 4e10 085c 2e04 604f b1b2
    0000090: 004e 1009 5c2e 0460 4f2a 2b2a b400 07b7
    00000a0: 000a 3906 b200 4e10 0a5c 2e04 604f 1806
    00000b0: 2898 9c00 0eb2 004e 100b 5c2e 0460 4fb1
    00000c0: b200 4e10 0c5c 2e04 604f a7ff 36       
  Stackmap Table:
    same_frame(@0)
    full_frame(@132,{Object[#39],Object[#40],Double,Double,Object[#40],Double},{})
    chop_frame(@133,2)
    chop_frame(@182,3)

	at org.apache.commons.math.optimization.MultiDirectionalTest.testRosenbrock(MultiDirectionalTest.java:85)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at junit.framework.TestCase.runTest(TestCase.java:176)
	at junit.framework.TestCase.runBare(TestCase.java:141)
	at junit.framework.TestResult$1.protect(TestResult.java:122)
	at junit.framework.TestResult.runProtected(TestResult.java:142)
	at junit.framework.TestResult.run(TestResult.java:125)
	at junit.framework.TestCase.run(TestCase.java:129)
	at junit.framework.TestSuite.runTest(TestSuite.java:255)
	at junit.framework.TestSuite.run(TestSuite.java:250)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:84)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:138)
	at com.gzoltar.core.instr.testing.junit.JUnitRunner.run(JUnitRunner.java:47)
	at com.gzoltar.core.instr.Runner.main(Runner.java:46)

org.apache.commons.math.optimization.MultiDirectionalTest#testPowell
java.lang.VerifyError: StackMapTable error: bad offset
Exception Details:
  Location:
    org/apache/commons/math/optimization/MultiDirectional.iterateSimplex()V @0: getstatic
  Reason:
    Invalid stackmap specification.
  Current Frame:
    bci: @133
    flags: { }
    locals: { 'org/apache/commons/math/optimization/MultiDirectional', '[Lorg/apache/commons/math/optimization/PointCostPair;', double, double_2nd, double, double_2nd }
    stack: { }
  Bytecode:
    0000000: b200 4e03 5c2e 0460 4f2a b400 084c b200
    0000010: 4e04 5c2e 0460 4f2b 0332 b400 0949 b200
    0000020: 4e05 5c2e 0460 4f2a 2b0f b700 0a39 04b2
    0000030: 004e 065c 2e04 604f 1804 2898 9c00 53b2
    0000040: 004e 075c 2e04 604f 2ab4 0008 3a06 b200
    0000050: 4e08 5c2e 0460 4f2a 2b2a b400 04b7 000a
    0000060: 3907 b200 4e10 065c 2e04 604f 1804 1807
    0000070: 989d 0013 b200 4e10 075c 2e04 604f 2a19
    0000080: 06b5 0008 b200 4e10 085c 2e04 604f b1b2
    0000090: 004e 1009 5c2e 0460 4f2a 2b2a b400 07b7
    00000a0: 000a 3906 b200 4e10 0a5c 2e04 604f 1806
    00000b0: 2898 9c00 0eb2 004e 100b 5c2e 0460 4fb1
    00000c0: b200 4e10 0c5c 2e04 604f a7ff 36       
  Stackmap Table:
    same_frame(@0)
    full_frame(@132,{Object[#39],Object[#40],Double,Double,Object[#40],Double},{})
    chop_frame(@133,2)
    chop_frame(@182,3)

	at org.apache.commons.math.optimization.MultiDirectionalTest.testPowell(MultiDirectionalTest.java:112)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at junit.framework.TestCase.runTest(TestCase.java:176)
	at junit.framework.TestCase.runBare(TestCase.java:141)
	at junit.framework.TestResult$1.protect(TestResult.java:122)
	at junit.framework.TestResult.runProtected(TestResult.java:142)
	at junit.framework.TestResult.run(TestResult.java:125)
	at junit.framework.TestCase.run(TestCase.java:129)
	at junit.framework.TestSuite.runTest(TestSuite.java:255)
	at junit.framework.TestSuite.run(TestSuite.java:250)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:84)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:138)
	at com.gzoltar.core.instr.testing.junit.JUnitRunner.run(JUnitRunner.java:47)
	at com.gzoltar.core.instr.Runner.main(Runner.java:46)

org.apache.commons.math.fraction.FractionFormatTest#testFormatImproperNegative
java.lang.ClassFormatError: StackMapTable format error: bad offset for Uninitialized in method org.apache.commons.math.fraction.Fraction.addSub(Lorg/apache/commons/math/fraction/Fraction;Z)Lorg/apache/commons/math/fraction/Fraction;
	at org.apache.commons.math.fraction.FractionFormatTest.testFormatImproperNegative(FractionFormatTest.java:84)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at junit.framework.TestCase.runTest(TestCase.java:176)
	at junit.framework.TestCase.runBare(TestCase.java:141)
	at junit.framework.TestResult$1.protect(TestResult.java:122)
	at junit.framework.TestResult.runProtected(TestResult.java:142)
	at junit.framework.TestResult.run(TestResult.java:125)
	at junit.framework.TestCase.run(TestCase.java:129)
	at junit.framework.TestSuite.runTest(TestSuite.java:255)
	at junit.framework.TestSuite.run(TestSuite.java:250)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:84)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:138)
	at com.gzoltar.core.instr.testing.junit.JUnitRunner.run(JUnitRunner.java:47)
	at com.gzoltar.core.instr.Runner.main(Runner.java:46)

org.apache.commons.math.fraction.FractionFormatTest#testFormatImproper
java.lang.ClassFormatError: StackMapTable format error: bad offset for Uninitialized in method org.apache.commons.math.fraction.Fraction.addSub(Lorg/apache/commons/math/fraction/Fraction;Z)Lorg/apache/commons/math/fraction/Fraction;
	at org.apache.commons.math.fraction.FractionFormatTest.testFormatImproper(FractionFormatTest.java:74)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at junit.framework.TestCase.runTest(TestCase.java:176)
	at junit.framework.TestCase.runBare(TestCase.java:141)
	at junit.framework.TestResult$1.protect(TestResult.java:122)
	at junit.framework.TestResult.runProtected(TestResult.java:142)
	at junit.framework.TestResult.run(TestResult.java:125)
	at junit.framework.TestCase.run(TestCase.java:129)
	at junit.framework.TestSuite.runTest(TestSuite.java:255)
	at junit.framework.TestSuite.run(TestSuite.java:250)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:84)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:138)
	at com.gzoltar.core.instr.testing.junit.JUnitRunner.run(JUnitRunner.java:47)
	at com.gzoltar.core.instr.Runner.main(Runner.java:46)

org.apache.commons.math.fraction.FractionFormatTest#testParseProper
java.lang.ClassFormatError: StackMapTable format error: bad offset for Uninitialized in method org.apache.commons.math.fraction.Fraction.addSub(Lorg/apache/commons/math/fraction/Fraction;Z)Lorg/apache/commons/math/fraction/Fraction;
	at org.apache.commons.math.fraction.ProperFractionFormat.parse(ProperFractionFormat.java:214)
	at org.apache.commons.math.fraction.FractionFormat.parse(FractionFormat.java:245)
	at org.apache.commons.math.fraction.FractionFormatTest.testParseProper(FractionFormatTest.java:198)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at junit.framework.TestCase.runTest(TestCase.java:176)
	at junit.framework.TestCase.runBare(TestCase.java:141)
	at junit.framework.TestResult$1.protect(TestResult.java:122)
	at junit.framework.TestResult.runProtected(TestResult.java:142)
	at junit.framework.TestResult.run(TestResult.java:125)
	at junit.framework.TestCase.run(TestCase.java:129)
	at junit.framework.TestSuite.runTest(TestSuite.java:255)
	at junit.framework.TestSuite.run(TestSuite.java:250)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:84)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:138)
	at com.gzoltar.core.instr.testing.junit.JUnitRunner.run(JUnitRunner.java:47)
	at com.gzoltar.core.instr.Runner.main(Runner.java:46)

org.apache.commons.math.fraction.FractionFormatTest#testParseProperNegative
java.lang.ClassFormatError: StackMapTable format error: bad offset for Uninitialized in method org.apache.commons.math.fraction.Fraction.addSub(Lorg/apache/commons/math/fraction/Fraction;Z)Lorg/apache/commons/math/fraction/Fraction;
	at org.apache.commons.math.fraction.ProperFractionFormat.parse(ProperFractionFormat.java:214)
	at org.apache.commons.math.fraction.FractionFormat.parse(FractionFormat.java:245)
	at org.apache.commons.math.fraction.FractionFormatTest.testParseProperNegative(FractionFormatTest.java:217)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at junit.framework.TestCase.runTest(TestCase.java:176)
	at junit.framework.TestCase.runBare(TestCase.java:141)
	at junit.framework.TestResult$1.protect(TestResult.java:122)
	at junit.framework.TestResult.runProtected(TestResult.java:142)
	at junit.framework.TestResult.run(TestResult.java:125)
	at junit.framework.TestCase.run(TestCase.java:129)
	at junit.framework.TestSuite.runTest(TestSuite.java:255)
	at junit.framework.TestSuite.run(TestSuite.java:250)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:84)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:138)
	at com.gzoltar.core.instr.testing.junit.JUnitRunner.run(JUnitRunner.java:47)
	at com.gzoltar.core.instr.Runner.main(Runner.java:46)

org.apache.commons.math.fraction.FractionFormatTest#testParse
java.lang.ClassFormatError: StackMapTable format error: bad offset for Uninitialized in method org.apache.commons.math.fraction.Fraction.addSub(Lorg/apache/commons/math/fraction/Fraction;Z)Lorg/apache/commons/math/fraction/Fraction;
	at org.apache.commons.math.fraction.FractionFormat.parse(FractionFormat.java:309)
	at org.apache.commons.math.fraction.ProperFractionFormat.parse(ProperFractionFormat.java:133)
	at org.apache.commons.math.fraction.FractionFormat.parse(FractionFormat.java:245)
	at org.apache.commons.math.fraction.FractionFormatTest.testParse(FractionFormatTest.java:97)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at junit.framework.TestCase.runTest(TestCase.java:176)
	at junit.framework.TestCase.runBare(TestCase.java:141)
	at junit.framework.TestResult$1.protect(TestResult.java:122)
	at junit.framework.TestResult.runProtected(TestResult.java:142)
	at junit.framework.TestResult.run(TestResult.java:125)
	at junit.framework.TestCase.run(TestCase.java:129)
	at junit.framework.TestSuite.runTest(TestSuite.java:255)
	at junit.framework.TestSuite.run(TestSuite.java:250)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:84)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:138)
	at com.gzoltar.core.instr.testing.junit.JUnitRunner.run(JUnitRunner.java:47)
	at com.gzoltar.core.instr.Runner.main(Runner.java:46)

org.apache.commons.math.fraction.FractionFormatTest#testFormatZero
java.lang.ClassFormatError: StackMapTable format error: bad offset for Uninitialized in method org.apache.commons.math.fraction.Fraction.addSub(Lorg/apache/commons/math/fraction/Fraction;Z)Lorg/apache/commons/math/fraction/Fraction;
	at org.apache.commons.math.fraction.FractionFormatTest.testFormatZero(FractionFormatTest.java:63)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at junit.framework.TestCase.runTest(TestCase.java:176)
	at junit.framework.TestCase.runBare(TestCase.java:141)
	at junit.framework.TestResult$1.protect(TestResult.java:122)
	at junit.framework.TestResult.runProtected(TestResult.java:142)
	at junit.framework.TestResult.run(TestResult.java:125)
	at junit.framework.TestCase.run(TestCase.java:129)
	at junit.framework.TestSuite.runTest(TestSuite.java:255)
	at junit.framework.TestSuite.run(TestSuite.java:250)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:84)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:138)
	at com.gzoltar.core.instr.testing.junit.JUnitRunner.run(JUnitRunner.java:47)
	at com.gzoltar.core.instr.Runner.main(Runner.java:46)

org.apache.commons.math.fraction.FractionFormatTest#testFormatNegative
java.lang.ClassFormatError: StackMapTable format error: bad offset for Uninitialized in method org.apache.commons.math.fraction.Fraction.addSub(Lorg/apache/commons/math/fraction/Fraction;Z)Lorg/apache/commons/math/fraction/Fraction;
	at org.apache.commons.math.fraction.FractionFormatTest.testFormatNegative(FractionFormatTest.java:52)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at junit.framework.TestCase.runTest(TestCase.java:176)
	at junit.framework.TestCase.runBare(TestCase.java:141)
	at junit.framework.TestResult$1.protect(TestResult.java:122)
	at junit.framework.TestResult.runProtected(TestResult.java:142)
	at junit.framework.TestResult.run(TestResult.java:125)
	at junit.framework.TestCase.run(TestCase.java:129)
	at junit.framework.TestSuite.runTest(TestSuite.java:255)
	at junit.framework.TestSuite.run(TestSuite.java:250)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:84)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:138)
	at com.gzoltar.core.instr.testing.junit.JUnitRunner.run(JUnitRunner.java:47)
	at com.gzoltar.core.instr.Runner.main(Runner.java:46)

org.apache.commons.math.fraction.FractionFormatTest#testParseInteger
java.lang.ClassFormatError: StackMapTable format error: bad offset for Uninitialized in method org.apache.commons.math.fraction.Fraction.addSub(Lorg/apache/commons/math/fraction/Fraction;Z)Lorg/apache/commons/math/fraction/Fraction;
	at org.apache.commons.math.fraction.FractionFormat.parse(FractionFormat.java:283)
	at org.apache.commons.math.fraction.ProperFractionFormat.parse(ProperFractionFormat.java:133)
	at org.apache.commons.math.fraction.FractionFormat.parse(FractionFormat.java:245)
	at org.apache.commons.math.fraction.FractionFormatTest.testParseInteger(FractionFormatTest.java:114)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at junit.framework.TestCase.runTest(TestCase.java:176)
	at junit.framework.TestCase.runBare(TestCase.java:141)
	at junit.framework.TestResult$1.protect(TestResult.java:122)
	at junit.framework.TestResult.runProtected(TestResult.java:142)
	at junit.framework.TestResult.run(TestResult.java:125)
	at junit.framework.TestCase.run(TestCase.java:129)
	at junit.framework.TestSuite.runTest(TestSuite.java:255)
	at junit.framework.TestSuite.run(TestSuite.java:250)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:84)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:138)
	at com.gzoltar.core.instr.testing.junit.JUnitRunner.run(JUnitRunner.java:47)
	at com.gzoltar.core.instr.Runner.main(Runner.java:46)

org.apache.commons.math.fraction.FractionFormatTest#testFormat
java.lang.ClassFormatError: StackMapTable format error: bad offset for Uninitialized in method org.apache.commons.math.fraction.Fraction.addSub(Lorg/apache/commons/math/fraction/Fraction;Z)Lorg/apache/commons/math/fraction/Fraction;
	at org.apache.commons.math.fraction.FractionFormatTest.testFormat(FractionFormatTest.java:41)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at junit.framework.TestCase.runTest(TestCase.java:176)
	at junit.framework.TestCase.runBare(TestCase.java:141)
	at junit.framework.TestResult$1.protect(TestResult.java:122)
	at junit.framework.TestResult.runProtected(TestResult.java:142)
	at junit.framework.TestResult.run(TestResult.java:125)
	at junit.framework.TestCase.run(TestCase.java:129)
	at junit.framework.TestSuite.runTest(TestSuite.java:255)
	at junit.framework.TestSuite.run(TestSuite.java:250)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:84)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:138)
	at com.gzoltar.core.instr.testing.junit.JUnitRunner.run(JUnitRunner.java:47)
	at com.gzoltar.core.instr.Runner.main(Runner.java:46)

org.apache.commons.math.fraction.FractionFormatTest#testParseNegative
java.lang.ClassFormatError: StackMapTable format error: bad offset for Uninitialized in method org.apache.commons.math.fraction.Fraction.addSub(Lorg/apache/commons/math/fraction/Fraction;Z)Lorg/apache/commons/math/fraction/Fraction;
	at org.apache.commons.math.fraction.FractionFormat.parse(FractionFormat.java:309)
	at org.apache.commons.math.fraction.ProperFractionFormat.parse(ProperFractionFormat.java:133)
	at org.apache.commons.math.fraction.FractionFormat.parse(FractionFormat.java:245)
	at org.apache.commons.math.fraction.FractionFormatTest.testParseNegative(FractionFormatTest.java:169)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at junit.framework.TestCase.runTest(TestCase.java:176)
	at junit.framework.TestCase.runBare(TestCase.java:141)
	at junit.framework.TestResult$1.protect(TestResult.java:122)
	at junit.framework.TestResult.runProtected(TestResult.java:142)
	at junit.framework.TestResult.run(TestResult.java:125)
	at junit.framework.TestCase.run(TestCase.java:129)
	at junit.framework.TestSuite.runTest(TestSuite.java:255)
	at junit.framework.TestSuite.run(TestSuite.java:250)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:84)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:138)
	at com.gzoltar.core.instr.testing.junit.JUnitRunner.run(JUnitRunner.java:47)
	at com.gzoltar.core.instr.Runner.main(Runner.java:46)

org.apache.commons.math.stat.inference.ChiSquareFactoryTest#testChiSquareLargeTestStatistic
junit.framework.AssertionFailedError: chi-square test statistic expected:<114875.90421929007> but was:<3624883.3429077636>
	at junit.framework.Assert.fail(Assert.java:57)
	at junit.framework.Assert.failNotEquals(Assert.java:329)
	at junit.framework.Assert.assertEquals(Assert.java:120)
	at junit.framework.TestCase.assertEquals(TestCase.java:279)
	at org.apache.commons.math.stat.inference.ChiSquareTestTest.testChiSquareLargeTestStatistic(ChiSquareTestTest.java:183)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at junit.framework.TestCase.runTest(TestCase.java:176)
	at junit.framework.TestCase.runBare(TestCase.java:141)
	at junit.framework.TestResult$1.protect(TestResult.java:122)
	at junit.framework.TestResult.runProtected(TestResult.java:142)
	at junit.framework.TestResult.run(TestResult.java:125)
	at junit.framework.TestCase.run(TestCase.java:129)
	at junit.framework.TestSuite.runTest(TestSuite.java:255)
	at junit.framework.TestSuite.run(TestSuite.java:250)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:84)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:138)
	at com.gzoltar.core.instr.testing.junit.JUnitRunner.run(JUnitRunner.java:47)
	at com.gzoltar.core.instr.Runner.main(Runner.java:46)

org.apache.commons.math.stat.inference.ChiSquareFactoryTest#testChiSquare
junit.framework.AssertionFailedError: chi-square test statistic expected:<9.023307936427388> but was:<16.413107036160778>
	at junit.framework.Assert.fail(Assert.java:57)
	at junit.framework.Assert.failNotEquals(Assert.java:329)
	at junit.framework.Assert.assertEquals(Assert.java:120)
	at junit.framework.TestCase.assertEquals(TestCase.java:279)
	at org.apache.commons.math.stat.inference.ChiSquareTestTest.testChiSquare(ChiSquareTestTest.java:60)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at junit.framework.TestCase.runTest(TestCase.java:176)
	at junit.framework.TestCase.runBare(TestCase.java:141)
	at junit.framework.TestResult$1.protect(TestResult.java:122)
	at junit.framework.TestResult.runProtected(TestResult.java:142)
	at junit.framework.TestResult.run(TestResult.java:125)
	at junit.framework.TestCase.run(TestCase.java:129)
	at junit.framework.TestSuite.runTest(TestSuite.java:255)
	at junit.framework.TestSuite.run(TestSuite.java:250)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:84)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:138)
	at com.gzoltar.core.instr.testing.junit.JUnitRunner.run(JUnitRunner.java:47)
	at com.gzoltar.core.instr.Runner.main(Runner.java:46)

org.apache.commons.math.stat.inference.TestUtilsTest#testChiSquareLargeTestStatistic
junit.framework.AssertionFailedError: chi-square test statistic expected:<114875.90421929007> but was:<3624883.3429077636>
	at junit.framework.Assert.fail(Assert.java:57)
	at junit.framework.Assert.failNotEquals(Assert.java:329)
	at junit.framework.Assert.assertEquals(Assert.java:120)
	at junit.framework.TestCase.assertEquals(TestCase.java:279)
	at org.apache.commons.math.stat.inference.TestUtilsTest.testChiSquareLargeTestStatistic(TestUtilsTest.java:181)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at junit.framework.TestCase.runTest(TestCase.java:176)
	at junit.framework.TestCase.runBare(TestCase.java:141)
	at junit.framework.TestResult$1.protect(TestResult.java:122)
	at junit.framework.TestResult.runProtected(TestResult.java:142)
	at junit.framework.TestResult.run(TestResult.java:125)
	at junit.framework.TestCase.run(TestCase.java:129)
	at junit.framework.TestSuite.runTest(TestSuite.java:255)
	at junit.framework.TestSuite.run(TestSuite.java:250)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:84)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:138)
	at com.gzoltar.core.instr.testing.junit.JUnitRunner.run(JUnitRunner.java:47)
	at com.gzoltar.core.instr.Runner.main(Runner.java:46)

org.apache.commons.math.stat.inference.TestUtilsTest#testChiSquare
junit.framework.AssertionFailedError: chi-square test statistic expected:<9.023307936427388> but was:<16.413107036160778>
	at junit.framework.Assert.fail(Assert.java:57)
	at junit.framework.Assert.failNotEquals(Assert.java:329)
	at junit.framework.Assert.assertEquals(Assert.java:120)
	at junit.framework.TestCase.assertEquals(TestCase.java:279)
	at org.apache.commons.math.stat.inference.TestUtilsTest.testChiSquare(TestUtilsTest.java:58)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at junit.framework.TestCase.runTest(TestCase.java:176)
	at junit.framework.TestCase.runBare(TestCase.java:141)
	at junit.framework.TestResult$1.protect(TestResult.java:122)
	at junit.framework.TestResult.runProtected(TestResult.java:142)
	at junit.framework.TestResult.run(TestResult.java:125)
	at junit.framework.TestCase.run(TestCase.java:129)
	at junit.framework.TestSuite.runTest(TestSuite.java:255)
	at junit.framework.TestSuite.run(TestSuite.java:250)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:84)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:138)
	at com.gzoltar.core.instr.testing.junit.JUnitRunner.run(JUnitRunner.java:47)
	at com.gzoltar.core.instr.Runner.main(Runner.java:46)

org.apache.commons.math.stat.inference.ChiSquareTestTest#testChiSquareLargeTestStatistic
junit.framework.AssertionFailedError: chi-square test statistic expected:<114875.90421929007> but was:<3624883.3429077636>
	at junit.framework.Assert.fail(Assert.java:57)
	at junit.framework.Assert.failNotEquals(Assert.java:329)
	at junit.framework.Assert.assertEquals(Assert.java:120)
	at junit.framework.TestCase.assertEquals(TestCase.java:279)
	at org.apache.commons.math.stat.inference.ChiSquareTestTest.testChiSquareLargeTestStatistic(ChiSquareTestTest.java:183)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at junit.framework.TestCase.runTest(TestCase.java:176)
	at junit.framework.TestCase.runBare(TestCase.java:141)
	at junit.framework.TestResult$1.protect(TestResult.java:122)
	at junit.framework.TestResult.runProtected(TestResult.java:142)
	at junit.framework.TestResult.run(TestResult.java:125)
	at junit.framework.TestCase.run(TestCase.java:129)
	at junit.framework.TestSuite.runTest(TestSuite.java:255)
	at junit.framework.TestSuite.run(TestSuite.java:250)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:84)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:138)
	at com.gzoltar.core.instr.testing.junit.JUnitRunner.run(JUnitRunner.java:47)
	at com.gzoltar.core.instr.Runner.main(Runner.java:46)

org.apache.commons.math.stat.inference.ChiSquareTestTest#testChiSquare
junit.framework.AssertionFailedError: chi-square test statistic expected:<9.023307936427388> but was:<16.413107036160778>
	at junit.framework.Assert.fail(Assert.java:57)
	at junit.framework.Assert.failNotEquals(Assert.java:329)
	at junit.framework.Assert.assertEquals(Assert.java:120)
	at junit.framework.TestCase.assertEquals(TestCase.java:279)
	at org.apache.commons.math.stat.inference.ChiSquareTestTest.testChiSquare(ChiSquareTestTest.java:60)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at junit.framework.TestCase.runTest(TestCase.java:176)
	at junit.framework.TestCase.runBare(TestCase.java:141)
	at junit.framework.TestResult$1.protect(TestResult.java:122)
	at junit.framework.TestResult.runProtected(TestResult.java:142)
	at junit.framework.TestResult.run(TestResult.java:125)
	at junit.framework.TestCase.run(TestCase.java:129)
	at junit.framework.TestSuite.runTest(TestSuite.java:255)
	at junit.framework.TestSuite.run(TestSuite.java:250)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:84)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:138)
	at com.gzoltar.core.instr.testing.junit.JUnitRunner.run(JUnitRunner.java:47)
	at com.gzoltar.core.instr.Runner.main(Runner.java:46)


/************************/
/* Suspicious statement */
/************************/
org.apache.commons.math.fraction.ProperFractionFormat:224 -> 0.4225771273642583 (ep: 6, ef: 10, np: 1105, nf: 25)
org.apache.commons.math.fraction.ProperFractionFormat:228 -> 0.4225771273642583 (ep: 6, ef: 10, np: 1105, nf: 25)
org.apache.commons.math.fraction.ProperFractionFormat:229 -> 0.4225771273642583 (ep: 6, ef: 10, np: 1105, nf: 25)
org.apache.commons.math.fraction.FractionFormat:114 -> 0.4225771273642583 (ep: 6, ef: 10, np: 1105, nf: 25)
org.apache.commons.math.fraction.FractionFormat:115 -> 0.4225771273642583 (ep: 6, ef: 10, np: 1105, nf: 25)
org.apache.commons.math.fraction.FractionFormat:132 -> 0.4225771273642583 (ep: 6, ef: 10, np: 1105, nf: 25)
org.apache.commons.math.fraction.FractionFormat:133 -> 0.4225771273642583 (ep: 6, ef: 10, np: 1105, nf: 25)
org.apache.commons.math.fraction.FractionFormat:154 -> 0.4225771273642583 (ep: 6, ef: 10, np: 1105, nf: 25)
org.apache.commons.math.fraction.FractionFormat:155 -> 0.4225771273642583 (ep: 6, ef: 10, np: 1105, nf: 25)
org.apache.commons.math.fraction.FractionFormat:156 -> 0.4225771273642583 (ep: 6, ef: 10, np: 1105, nf: 25)
org.apache.commons.math.fraction.FractionFormat:157 -> 0.4225771273642583 (ep: 6, ef: 10, np: 1105, nf: 25)
org.apache.commons.math.stat.inference.ChiSquareTestImpl:92 -> 0.41403933560541256 (ep: 0, ef: 6, np: 1111, nf: 29)
org.apache.commons.math.stat.inference.ChiSquareTestImpl:93 -> 0.41403933560541256 (ep: 0, ef: 6, np: 1111, nf: 29)
org.apache.commons.math.fraction.FractionFormat:277 -> 0.3194382824999699 (ep: 2, ef: 5, np: 1109, nf: 30)
org.apache.commons.math.fraction.FractionFormat:278 -> 0.3194382824999699 (ep: 2, ef: 5, np: 1109, nf: 30)
org.apache.commons.math.fraction.FractionFormat:279 -> 0.3194382824999699 (ep: 2, ef: 5, np: 1109, nf: 30)
org.apache.commons.math.fraction.FractionFormat:383 -> 0.3194382824999699 (ep: 2, ef: 5, np: 1109, nf: 30)
org.apache.commons.math.fraction.ProperFractionFormat:133 -> 0.2988071523335984 (ep: 3, ef: 5, np: 1108, nf: 30)
org.apache.commons.math.fraction.FractionFormat:244 -> 0.2988071523335984 (ep: 3, ef: 5, np: 1108, nf: 30)
org.apache.commons.math.fraction.FractionFormat:245 -> 0.2988071523335984 (ep: 3, ef: 5, np: 1108, nf: 30)
org.apache.commons.math.fraction.FractionFormat:261 -> 0.2988071523335984 (ep: 3, ef: 5, np: 1108, nf: 30)
org.apache.commons.math.fraction.FractionFormat:264 -> 0.2988071523335984 (ep: 3, ef: 5, np: 1108, nf: 30)
org.apache.commons.math.fraction.FractionFormat:267 -> 0.2988071523335984 (ep: 3, ef: 5, np: 1108, nf: 30)
org.apache.commons.math.fraction.FractionFormat:268 -> 0.2988071523335984 (ep: 3, ef: 5, np: 1108, nf: 30)
org.apache.commons.math.fraction.FractionFormat:360 -> 0.2988071523335984 (ep: 3, ef: 5, np: 1108, nf: 30)
org.apache.commons.math.fraction.FractionFormat:361 -> 0.2988071523335984 (ep: 3, ef: 5, np: 1108, nf: 30)
org.apache.commons.math.fraction.FractionFormat:362 -> 0.2988071523335984 (ep: 3, ef: 5, np: 1108, nf: 30)
org.apache.commons.math.fraction.FractionFormat:371 -> 0.2988071523335984 (ep: 3, ef: 5, np: 1108, nf: 30)
org.apache.commons.math.fraction.FractionFormat:372 -> 0.2988071523335984 (ep: 3, ef: 5, np: 1108, nf: 30)
org.apache.commons.math.fraction.FractionFormat:373 -> 0.2988071523335984 (ep: 3, ef: 5, np: 1108, nf: 30)
org.apache.commons.math.fraction.FractionFormat:375 -> 0.2988071523335984 (ep: 3, ef: 5, np: 1108, nf: 30)
org.apache.commons.math.fraction.FractionFormat:378 -> 0.2988071523335984 (ep: 3, ef: 5, np: 1108, nf: 30)
org.apache.commons.math.fraction.FractionFormat:379 -> 0.2988071523335984 (ep: 3, ef: 5, np: 1108, nf: 30)
org.apache.commons.math.fraction.FractionFormat:380 -> 0.2988071523335984 (ep: 3, ef: 5, np: 1108, nf: 30)
org.apache.commons.math.fraction.FractionFormat:382 -> 0.2988071523335984 (ep: 3, ef: 5, np: 1108, nf: 30)
org.apache.commons.math.fraction.FractionFormat:387 -> 0.2988071523335984 (ep: 3, ef: 5, np: 1108, nf: 30)
org.apache.commons.math.fraction.FractionFormat:233 -> 0.2817180849095055 (ep: 4, ef: 5, np: 1107, nf: 30)
org.apache.commons.math.fraction.FractionFormat:225 -> 0.25555062599997597 (ep: 3, ef: 4, np: 1108, nf: 31)
org.apache.commons.math.fraction.ProperFractionFormat:211 -> 0.23904572186687872 (ep: 0, ef: 2, np: 1111, nf: 33)
org.apache.commons.math.fraction.ProperFractionFormat:212 -> 0.23904572186687872 (ep: 0, ef: 2, np: 1111, nf: 33)
org.apache.commons.math.fraction.ProperFractionFormat:213 -> 0.23904572186687872 (ep: 0, ef: 2, np: 1111, nf: 33)
org.apache.commons.math.fraction.ProperFractionFormat:214 -> 0.23904572186687872 (ep: 0, ef: 2, np: 1111, nf: 33)
org.apache.commons.math.fraction.FractionFormat:309 -> 0.23904572186687872 (ep: 0, ef: 2, np: 1111, nf: 33)
org.apache.commons.math.stat.inference.TestUtils:278 -> 0.23904572186687872 (ep: 0, ef: 2, np: 1111, nf: 33)
org.apache.commons.math.distribution.ChiSquaredDistributionImpl:82 -> 0.22677868380553634 (ep: 14, ef: 6, np: 1097, nf: 29)
org.apache.commons.math.distribution.GammaDistributionImpl:72 -> 0.20283702113484398 (ep: 19, ef: 6, np: 1092, nf: 29)
org.apache.commons.math.distribution.GammaDistributionImpl:75 -> 0.20283702113484398 (ep: 19, ef: 6, np: 1092, nf: 29)
org.apache.commons.math.distribution.GammaDistributionImpl:78 -> 0.20283702113484398 (ep: 19, ef: 6, np: 1092, nf: 29)
org.apache.commons.math.distribution.GammaDistributionImpl:142 -> 0.19889806323953876 (ep: 20, ef: 6, np: 1091, nf: 29)
org.apache.commons.math.fraction.ProperFractionFormat:166 -> 0.19518001458970666 (ep: 1, ef: 2, np: 1110, nf: 33)
org.apache.commons.math.fraction.ProperFractionFormat:173 -> 0.19518001458970666 (ep: 1, ef: 2, np: 1110, nf: 33)
org.apache.commons.math.fraction.ProperFractionFormat:174 -> 0.19518001458970666 (ep: 1, ef: 2, np: 1110, nf: 33)
org.apache.commons.math.fraction.ProperFractionFormat:175 -> 0.19518001458970666 (ep: 1, ef: 2, np: 1110, nf: 33)
org.apache.commons.math.fraction.ProperFractionFormat:182 -> 0.19518001458970666 (ep: 1, ef: 2, np: 1110, nf: 33)
org.apache.commons.math.fraction.ProperFractionFormat:193 -> 0.19518001458970666 (ep: 1, ef: 2, np: 1110, nf: 33)
org.apache.commons.math.fraction.ProperFractionFormat:196 -> 0.19518001458970666 (ep: 1, ef: 2, np: 1110, nf: 33)
org.apache.commons.math.fraction.ProperFractionFormat:197 -> 0.19518001458970666 (ep: 1, ef: 2, np: 1110, nf: 33)
org.apache.commons.math.fraction.ProperFractionFormat:205 -> 0.19518001458970666 (ep: 1, ef: 2, np: 1110, nf: 33)
org.apache.commons.math.fraction.FractionFormat:291 -> 0.19518001458970666 (ep: 1, ef: 2, np: 1110, nf: 33)
org.apache.commons.math.fraction.FractionFormat:292 -> 0.19518001458970666 (ep: 1, ef: 2, np: 1110, nf: 33)
org.apache.commons.math.fraction.FractionFormat:293 -> 0.19518001458970666 (ep: 1, ef: 2, np: 1110, nf: 33)
org.apache.commons.math.fraction.FractionFormat:286 -> 0.19518001458970666 (ep: 1, ef: 2, np: 1110, nf: 33)
org.apache.commons.math.fraction.FractionFormat:297 -> 0.19518001458970666 (ep: 1, ef: 2, np: 1110, nf: 33)
org.apache.commons.math.fraction.FractionFormat:300 -> 0.19518001458970666 (ep: 1, ef: 2, np: 1110, nf: 33)
org.apache.commons.math.fraction.FractionFormat:301 -> 0.19518001458970666 (ep: 1, ef: 2, np: 1110, nf: 33)
org.apache.commons.math.distribution.GammaDistributionImpl:122 -> 0.19518001458970663 (ep: 21, ef: 6, np: 1090, nf: 29)
org.apache.commons.math.distribution.ChiSquaredDistributionImpl:63 -> 0.19166296949998196 (ep: 22, ef: 6, np: 1089, nf: 29)
org.apache.commons.math.distribution.ChiSquaredDistributionImpl:64 -> 0.19166296949998196 (ep: 22, ef: 6, np: 1089, nf: 29)
org.apache.commons.math.distribution.ChiSquaredDistributionImpl:189 -> 0.19166296949998196 (ep: 22, ef: 6, np: 1089, nf: 29)
org.apache.commons.math.special.Gamma:120 -> 0.17928429140015903 (ep: 26, ef: 6, np: 1085, nf: 29)
org.apache.commons.math.stat.inference.ChiSquareTestImpl:66 -> 0.17142857142857143 (ep: 29, ef: 6, np: 1082, nf: 29)
org.apache.commons.math.stat.inference.ChiSquareTestImpl:67 -> 0.17142857142857143 (ep: 29, ef: 6, np: 1082, nf: 29)
org.apache.commons.math.stat.inference.ChiSquareTestImpl:68 -> 0.17142857142857143 (ep: 29, ef: 6, np: 1082, nf: 29)
org.apache.commons.math.stat.inference.ChiSquareTestImpl:72 -> 0.17142857142857143 (ep: 29, ef: 6, np: 1082, nf: 29)
org.apache.commons.math.stat.inference.ChiSquareTestImpl:76 -> 0.17142857142857143 (ep: 29, ef: 6, np: 1082, nf: 29)
org.apache.commons.math.stat.inference.ChiSquareTestImpl:77 -> 0.17142857142857143 (ep: 29, ef: 6, np: 1082, nf: 29)
org.apache.commons.math.stat.inference.ChiSquareTestImpl:78 -> 0.17142857142857143 (ep: 29, ef: 6, np: 1082, nf: 29)
org.apache.commons.math.stat.inference.ChiSquareTestImpl:80 -> 0.17142857142857143 (ep: 29, ef: 6, np: 1082, nf: 29)
org.apache.commons.math.stat.inference.ChiSquareTestImpl:345 -> 0.17142857142857143 (ep: 29, ef: 6, np: 1082, nf: 29)
org.apache.commons.math.stat.inference.ChiSquareTestImpl:346 -> 0.17142857142857143 (ep: 29, ef: 6, np: 1082, nf: 29)
org.apache.commons.math.stat.inference.ChiSquareTestImpl:350 -> 0.17142857142857143 (ep: 29, ef: 6, np: 1082, nf: 29)
org.apache.commons.math.distribution.GammaDistributionImpl:111 -> 0.1690308509457033 (ep: 30, ef: 6, np: 1081, nf: 29)
org.apache.commons.math.distribution.GammaDistributionImpl:114 -> 0.1690308509457033 (ep: 30, ef: 6, np: 1081, nf: 29)
org.apache.commons.math.distribution.GammaDistributionImpl:115 -> 0.1690308509457033 (ep: 30, ef: 6, np: 1081, nf: 29)
org.apache.commons.math.stat.inference.ChiSquareTestImpl:397 -> 0.1690308509457033 (ep: 6, ef: 3, np: 1105, nf: 32)
org.apache.commons.math.stat.inference.ChiSquareTestImpl:398 -> 0.1690308509457033 (ep: 6, ef: 3, np: 1105, nf: 32)
org.apache.commons.math.fraction.ProperFractionFormat:154 -> 0.1690308509457033 (ep: 2, ef: 2, np: 1109, nf: 33)
org.apache.commons.math.fraction.ProperFractionFormat:157 -> 0.1690308509457033 (ep: 2, ef: 2, np: 1109, nf: 33)
org.apache.commons.math.fraction.ProperFractionFormat:158 -> 0.1690308509457033 (ep: 2, ef: 2, np: 1109, nf: 33)
org.apache.commons.math.fraction.FractionFormat:283 -> 0.1690308509457033 (ep: 0, ef: 1, np: 1111, nf: 34)
org.apache.commons.math.stat.inference.TestUtils:303 -> 0.1690308509457033 (ep: 0, ef: 1, np: 1111, nf: 34)
org.apache.commons.math.stat.inference.ChiSquareTestImpl:362 -> 0.1583891032045364 (ep: 35, ef: 6, np: 1076, nf: 29)
org.apache.commons.math.stat.inference.ChiSquareTestImpl:363 -> 0.1583891032045364 (ep: 35, ef: 6, np: 1076, nf: 29)
org.apache.commons.math.stat.inference.ChiSquareTestImpl:367 -> 0.1583891032045364 (ep: 35, ef: 6, np: 1076, nf: 29)
org.apache.commons.math.special.Gamma:162 -> 0.15466177866794012 (ep: 37, ef: 6, np: 1074, nf: 29)
org.apache.commons.math.special.Gamma:160 -> 0.15118578920369088 (ep: 39, ef: 6, np: 1072, nf: 29)
org.apache.commons.math.fraction.ProperFractionFormat:134 -> 0.15118578920369088 (ep: 3, ef: 2, np: 1108, nf: 33)
org.apache.commons.math.fraction.ProperFractionFormat:138 -> 0.15118578920369088 (ep: 3, ef: 2, np: 1108, nf: 33)
org.apache.commons.math.fraction.ProperFractionFormat:141 -> 0.15118578920369088 (ep: 3, ef: 2, np: 1108, nf: 33)
org.apache.commons.math.fraction.ProperFractionFormat:144 -> 0.15118578920369088 (ep: 3, ef: 2, np: 1108, nf: 33)
org.apache.commons.math.fraction.ProperFractionFormat:145 -> 0.15118578920369088 (ep: 3, ef: 2, np: 1108, nf: 33)
org.apache.commons.math.special.Gamma:158 -> 0.14342743312012723 (ep: 44, ef: 6, np: 1067, nf: 29)
org.apache.commons.math.special.Gamma:186 -> 0.14342743312012723 (ep: 44, ef: 6, np: 1067, nf: 29)
org.apache.commons.math.fraction.ProperFractionFormat:116 -> 0.13801311186847084 (ep: 4, ef: 2, np: 1107, nf: 33)
org.apache.commons.math.distribution.ChiSquaredDistributionImpl:180 -> 0.13093073414159545 (ep: 12, ef: 3, np: 1099, nf: 32)
org.apache.commons.math.distribution.ChiSquaredDistributionImpl:182 -> 0.13093073414159545 (ep: 12, ef: 3, np: 1099, nf: 32)
org.apache.commons.math.stat.inference.TestUtils:102 -> 0.12777531299998798 (ep: 5, ef: 2, np: 1106, nf: 33)
org.apache.commons.math.special.Gamma:165 -> 0.1163350101494222 (ep: 16, ef: 3, np: 1095, nf: 32)
org.apache.commons.math.special.Gamma:93 -> 0.10936239248647338 (ep: 80, ef: 6, np: 1031, nf: 29)
org.apache.commons.math.special.Gamma:95 -> 0.10936239248647338 (ep: 80, ef: 6, np: 1031, nf: 29)
org.apache.commons.math.special.Gamma:96 -> 0.10936239248647338 (ep: 80, ef: 6, np: 1031, nf: 29)
org.apache.commons.math.special.Gamma:97 -> 0.10936239248647338 (ep: 80, ef: 6, np: 1031, nf: 29)
org.apache.commons.math.special.Gamma:99 -> 0.10936239248647338 (ep: 80, ef: 6, np: 1031, nf: 29)
org.apache.commons.math.special.Gamma:101 -> 0.10936239248647338 (ep: 80, ef: 6, np: 1031, nf: 29)
org.apache.commons.math.special.Gamma:102 -> 0.10936239248647338 (ep: 80, ef: 6, np: 1031, nf: 29)
org.apache.commons.math.special.Gamma:90 -> 0.10750340619486992 (ep: 83, ef: 6, np: 1028, nf: 29)
org.apache.commons.math.special.Gamma:106 -> 0.10750340619486992 (ep: 83, ef: 6, np: 1028, nf: 29)
org.apache.commons.math.distribution.GammaDistributionImpl:131 -> 0.1057361065275362 (ep: 20, ef: 3, np: 1091, nf: 32)
org.apache.commons.math.distribution.GammaDistributionImpl:134 -> 0.1057361065275362 (ep: 20, ef: 3, np: 1091, nf: 32)
org.apache.commons.math.distribution.GammaDistributionImpl:135 -> 0.1057361065275362 (ep: 20, ef: 3, np: 1091, nf: 32)
org.apache.commons.math.special.Gamma:237 -> 0.10141851056742199 (ep: 22, ef: 3, np: 1089, nf: 32)
org.apache.commons.math.special.Gamma:243 -> 0.10141851056742199 (ep: 22, ef: 3, np: 1089, nf: 32)
org.apache.commons.math.special.Gamma:256 -> 0.10141851056742199 (ep: 22, ef: 3, np: 1089, nf: 32)
org.apache.commons.math.special.Gamma:257 -> 0.10141851056742199 (ep: 22, ef: 3, np: 1089, nf: 32)
org.apache.commons.math.special.Gamma$1:248 -> 0.10141851056742199 (ep: 22, ef: 3, np: 1089, nf: 32)
org.apache.commons.math.special.Gamma$1:252 -> 0.10141851056742199 (ep: 22, ef: 3, np: 1089, nf: 32)
org.apache.commons.math.special.Gamma:235 -> 0.09944903161976938 (ep: 23, ef: 3, np: 1088, nf: 32)
org.apache.commons.math.special.Gamma:233 -> 0.09107651110783745 (ep: 28, ef: 3, np: 1083, nf: 32)
org.apache.commons.math.special.Gamma:260 -> 0.09107651110783745 (ep: 28, ef: 3, np: 1083, nf: 32)
org.apache.commons.math.special.Gamma:168 -> 0.08571428571428572 (ep: 32, ef: 3, np: 1079, nf: 32)
org.apache.commons.math.special.Gamma:169 -> 0.08571428571428572 (ep: 32, ef: 3, np: 1079, nf: 32)
org.apache.commons.math.special.Gamma:170 -> 0.08571428571428572 (ep: 32, ef: 3, np: 1079, nf: 32)
org.apache.commons.math.special.Gamma:171 -> 0.08571428571428572 (ep: 32, ef: 3, np: 1079, nf: 32)
org.apache.commons.math.special.Gamma:173 -> 0.08571428571428572 (ep: 32, ef: 3, np: 1079, nf: 32)
org.apache.commons.math.special.Gamma:174 -> 0.08571428571428572 (ep: 32, ef: 3, np: 1079, nf: 32)
org.apache.commons.math.special.Gamma:177 -> 0.08571428571428572 (ep: 32, ef: 3, np: 1079, nf: 32)
org.apache.commons.math.special.Gamma:179 -> 0.08571428571428572 (ep: 32, ef: 3, np: 1079, nf: 32)
org.apache.commons.math.special.Gamma:182 -> 0.08571428571428572 (ep: 32, ef: 3, np: 1079, nf: 32)
org.apache.commons.math.util.ContinuedFraction:133 -> 0.06195121541733007 (ep: 64, ef: 3, np: 1047, nf: 32)
org.apache.commons.math.util.ContinuedFraction:134 -> 0.06195121541733007 (ep: 64, ef: 3, np: 1047, nf: 32)
org.apache.commons.math.util.ContinuedFraction:135 -> 0.06195121541733007 (ep: 64, ef: 3, np: 1047, nf: 32)
org.apache.commons.math.util.ContinuedFraction:136 -> 0.06195121541733007 (ep: 64, ef: 3, np: 1047, nf: 32)
org.apache.commons.math.util.ContinuedFraction:137 -> 0.06195121541733007 (ep: 64, ef: 3, np: 1047, nf: 32)
org.apache.commons.math.util.ContinuedFraction:138 -> 0.06195121541733007 (ep: 64, ef: 3, np: 1047, nf: 32)
org.apache.commons.math.util.ContinuedFraction:139 -> 0.06195121541733007 (ep: 64, ef: 3, np: 1047, nf: 32)
org.apache.commons.math.util.ContinuedFraction:140 -> 0.06195121541733007 (ep: 64, ef: 3, np: 1047, nf: 32)
org.apache.commons.math.util.ContinuedFraction:141 -> 0.06195121541733007 (ep: 64, ef: 3, np: 1047, nf: 32)
org.apache.commons.math.util.ContinuedFraction:142 -> 0.06195121541733007 (ep: 64, ef: 3, np: 1047, nf: 32)
org.apache.commons.math.util.ContinuedFraction:143 -> 0.06195121541733007 (ep: 64, ef: 3, np: 1047, nf: 32)
org.apache.commons.math.util.ContinuedFraction:144 -> 0.06195121541733007 (ep: 64, ef: 3, np: 1047, nf: 32)
org.apache.commons.math.util.ContinuedFraction:145 -> 0.06195121541733007 (ep: 64, ef: 3, np: 1047, nf: 32)
org.apache.commons.math.util.ContinuedFraction:146 -> 0.06195121541733007 (ep: 64, ef: 3, np: 1047, nf: 32)
org.apache.commons.math.util.ContinuedFraction:161 -> 0.06195121541733007 (ep: 64, ef: 3, np: 1047, nf: 32)
org.apache.commons.math.util.ContinuedFraction:162 -> 0.06195121541733007 (ep: 64, ef: 3, np: 1047, nf: 32)
org.apache.commons.math.util.ContinuedFraction:165 -> 0.06195121541733007 (ep: 64, ef: 3, np: 1047, nf: 32)
org.apache.commons.math.util.ContinuedFraction:166 -> 0.06195121541733007 (ep: 64, ef: 3, np: 1047, nf: 32)
org.apache.commons.math.util.ContinuedFraction:167 -> 0.06195121541733007 (ep: 64, ef: 3, np: 1047, nf: 32)
org.apache.commons.math.util.ContinuedFraction:168 -> 0.06195121541733007 (ep: 64, ef: 3, np: 1047, nf: 32)
org.apache.commons.math.util.ContinuedFraction:169 -> 0.06195121541733007 (ep: 64, ef: 3, np: 1047, nf: 32)
org.apache.commons.math.util.ContinuedFraction:170 -> 0.06195121541733007 (ep: 64, ef: 3, np: 1047, nf: 32)
org.apache.commons.math.util.ContinuedFraction:172 -> 0.06195121541733007 (ep: 64, ef: 3, np: 1047, nf: 32)
org.apache.commons.math.util.ContinuedFraction:178 -> 0.06195121541733007 (ep: 64, ef: 3, np: 1047, nf: 32)


